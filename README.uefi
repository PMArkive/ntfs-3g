This README pertains to the use of ntfs-3g as a UEFI driver

COMPILATION
===========

General options
---------------

The default UEFI driver provides read-write access to an NTFS volume.

If you would rather have compile a read-only version of the driver, you should
either define the FORCE_READONLY macro in include/uefi-driver/uefi-driver.h or
pass that macro as a compiler option,

Linux
-----

This assumes that you have gcc (5.0 or later) and the EDK2.
For this example, we assume that EDK2 is installed in /usr/src/edk2.

Open a command prompt at the top if the ntfs-3g source directory and issue:

export WORKSPACE=$PWD
export EDK2_PATH=/usr/src/edk2
export PACKAGES_PATH=$WORKSPACE:$EDK2_PATH
source $EDK2_PATH/edksetup.sh --reconfig
build -a X64 -b RELEASE -t GCC5 -p uefi-driver.dsc

You may also use IA32, ARM or AARCH64 for the -a parameter to build a driver
for these architectures noting however that you you will need to have the
relevant toolchain and GCC prefix set.

For instance, to compile for ARM64, you would need to also issue:

export GCC5_AARCH64_PREFIX=aarch64-linux-gnu-

Windows (gnu-efi)
-----------------

This assumes that you have Visual Studio 2019 installed.

Add the gnu-efi submodule to the top of the ntfs-3g source directory by using
git://git.code.sf.net/p/gnu-efi/code as the reference URL and 'gnu-efi' as the
target directory to clone gnu-efi into. Or you can also extract any version more
recent than 3.0.13 into a 'gnu-efi' folder at the top of the directory (be very
mindful that compilation will not work with gnu-efi 3.0.12 or earlier).

Then you should simply be able to open the VS2019 solution file and build using
the IDE.

If you have QEMU installed under C:\Program Files\qemu\ you should also be
able to test the driver for any of the supported architectures (IA32, X64, ARM
and ARM64). Of course building and testing for the latter requires that you
selected the relevant C++ components during Visual Studio installation.

Windows (EDK2)
--------------

This assumes that you have Visual Studio 2019 and the EDK2 installed.
For this examples, we assume that EDK2 is installed in D:\EDK2.

Open a command prompt at the top of the ntfs-3g source directory and issue:

"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
set WORKSPACE=%cd%
set EDK2_PATH=D:\EDK2
set PACKAGES_PATH=%WORKSPACE%;%EDK2_PATH%
%EDK2_PATH%\edksetup.bat reconfig
build -a X64 -b RELEASE -t VS2019 -p uefi-driver.dsc

You may also use IA32, ARM or AARCH64 for the -a parameter to build a driver
for these architectures noting however that for ARM or ARM64 compilation, you
will need to have selected the relevant C++ components during Visual Studio
installation.

USAGE
=====

Simply load the driver from a UEFI Shell using the 'load' command and then
issue `map -r` to remap volumes. This should grand you access to any NTFS
volume that are visible in your UEFI system.

Note that NTFS volumes are unmounted, fully, as soon as the last open file
handle to that volume is closed. This makes the driver safe for surprise
removal/shutdown (as long as you don't perform these in the middle of a Shell
command or a UEFI application execution).

COMPLIANCE
==========

This UEFI NTFS driver should comply with the UEFI specifications, especially
with sections 13.4 and 13.5 from version 2.8 Errata A of the specs.

The one element you should be aware of is that directory listings are cached
with the initial cached content being reused until the last handle is closed.
This is enacted for performance reasons but it also means that, if you have a
directory handle open, and create/delete entries in that directory, you will
not see your changes until you close that handle and reopen the directory.
